================================================================================
PowerShell.MCP Write-Host キャプチャ漏れ問題 調査レポート
================================================================================
作成日時: 2025-09-28 23:34:37
バージョン: feb2a01 (1.2.2) 安定版

================================================================================
1. 問題の概要
================================================================================
Write-Host の出力が MCPクライアントの === INFO === セクションに
断続的にキャプチャされない問題が発生。

症状:
- 一部のコマンドでWrite-Host出力が === INFO === セクションに表示されない
- PowerShellコンソール側では正常にカラー表示される
- 発生条件が不明確で再現性が不安定

================================================================================
2. 再現手順
================================================================================

【再現ケース1: 長いコマンドでの発生】
実行コマンド:
`powershell
Write-Host "=== 最終結論: 修正不要 ===" -ForegroundColor Green
Write-Host "
🎉 現在の安定版 (feb2a01) は完璧です！" -ForegroundColor Yellow
Write-Host "
✅ 完璧に動作している機能:" -ForegroundColor Green
# ... 多数のWrite-Host行を含む長いコマンド
`

実際の結果:
`
Your pipeline executed in: C:\MyProj\PowerShell.MCP [FileSystem]
=== OUTPUT ===
`
→ === INFO === セクションが完全に欠落

【再現ケース2: 通常のコマンドでは正常】
実行コマンド:
`powershell
Write-Host "テストメッセージ" -ForegroundColor Red
`

実際の結果:
`
Your pipeline executed in: C:\MyProj\PowerShell.MCP [FileSystem]
=== INFO ===
テストメッセージ
=== OUTPUT ===
`
→ 正常にキャプチャされる

================================================================================
3. 期待する結果
================================================================================
全てのWrite-Host出力が === INFO === セクションに確実にキャプチャされること:

`
Your pipeline executed in: C:\MyProj\PowerShell.MCP [FileSystem]
=== INFO ===
=== 最終結論: 修正不要 ===
🎉 現在の安定版 (feb2a01) は完璧です！
✅ 完璧に動作している機能:
[... 全てのWrite-Host出力]
=== OUTPUT ===
`

================================================================================
4. 現在の実装分析
================================================================================

【実装方式】
PowerShell.MCP では -InformationVariable を使用してWrite-Host出力をキャプチャ:

`powershell
$redirectedOutput = Invoke-Expression $Command 
    -OutVariable outVar 
    -ErrorVariable errorVar 
    -WarningVariable warningVar 
    -InformationVariable informationVar 
    4>&1 5>&1
`

【処理フロー】
1. Write-Host → Information Stream (6番)
2. -InformationVariable で $informationVar に捕獲
3. InformationRecord として処理
4. MessageData を抽出して === INFO === セクションに表示

【確認済み事項】
✅ -InformationVariable自体は正常動作
✅ 直接テストでは Write-Host がキャプチャされる
✅ PowerShellコンソール側では常に正常表示
❌ MCPPollingEngine内での処理に問題あり

================================================================================
5. 他のストリームの動作状況
================================================================================

【正常動作中のストリーム】
✅ Warning Stream: === WARNINGS === セクションに安定表示
✅ Verbose Stream: === HOST === セクションに安定表示  
✅ Debug Stream: === HOST === セクションに安定表示
✅ Error Stream: === ERRORS === セクションに安定表示
✅ Success Stream: === OUTPUT === セクションに安定表示

【問題のあるストリーム】
❌ Information Stream (Write-Host): 断続的キャプチャ漏れ

================================================================================
6. 推定原因
================================================================================

【可能性のある原因】
1. タイミング問題: MCPPollingEngineの処理タイミングの競合
2. バッファリング問題: Information Streamのバッファリング処理
3. InformationRecord処理: MessageData抽出ロジックの問題
4. 長いコマンドでの制限: 特定の条件下での処理制限
5. Preference設定の競合: InformationPreferenceの状態変化

【特に疑わしい箇所】
- MCPPollingEngine.ps1のInformation処理ループ
- InformationRecordのMessageData抽出処理
- 長いコマンドでのストリーム処理制限

================================================================================
7. これまでの調査結果
================================================================================

【確認済み事項】
✅ Variable方式(-InformationVariable)は既に実装済み
✅ 基本的なWrite-Hostキャプチャは動作する
✅ PowerShellコンソール側のカラー表示は完璧
✅ 他のストリーム(Warning, Verbose, Debug, Error)は安定動作
❌ Write-Hostのみ断続的にキャプチャ漏れが発生

【試行した解決策】
- Host.UIメソッドの使用 → MCP環境では機能せず
- ANSIエスケープシーケンス → 複雑で安定性に懸念
- Variable方式 → 実装済みだが問題残存

【現在の状況】
MCPPollingEngine.ps1の内部処理ロジックに問題があると推定。
Information Stream の処理部分の詳細調査が必要。

================================================================================
8. 次のアクション
================================================================================

【緊急度: 高】
1. MCPPollingEngine.ps1のInformation処理ロジック詳細調査
2. InformationRecord処理の問題箇所特定
3. 長いコマンドでの制限事項の確認
4. 安定したキャプチャ方法の実装

【期待される修正結果】
- Write-Host出力の100%安定キャプチャ
- PowerShellコンソール側のカラー表示維持
- 他のストリームへの影響なし
- 実装の複雑化を最小限に抑制

================================================================================
備考
================================================================================
このレポート作成時点では、PowerShell.MCP は「ほぼ完璧」だが、
Write-Hostの不安定性という重要な問題が残存している状況。

修正が完了すれば、真に完璧なツールとなる可能性が高い。
