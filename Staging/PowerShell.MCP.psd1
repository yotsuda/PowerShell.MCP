#
# Module manifest for module 'PowerShell.MCP'
#
# Generated by: Yoshifumi Tsuda
#
# Generated on: 2025/05/24
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'PowerShell.MCP.dll'

# Version number of this module.
ModuleVersion = '1.1.1'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = '313962fa-c90b-424a-9c8a-d4a05f4a1481'

# Author of this module
Author = 'Yoshifumi Tsuda'

# Company or vendor of this module
CompanyName = 'Unknown'

# Copyright statement for this module
Copyright = '(c) Yoshifumi Tsuda. All rights reserved.'

# Description of the functionality provided by this module
Description = 'Enables PowerShell console to function as an MCP server for Claude Desktop and other clients.'

# Minimum version of the PowerShell engine required by this module
PowerShellVersion = '7.2.15'

# Name of the PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# ClrVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @()

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @()

        # A URL to the license for this module.
        # LicenseUri = ''

        # A URL to the main website for this project.
        # ProjectUri = ''

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        ReleaseNotes = 'PowerShell MCP v1.1 Release Notes

=== Features ===
Transform your AI assistant into a powerful PowerShell tool! This groundbreaking module turns your PowerShell console into an MCP server, providing MCP clients (such as Claude Desktop) with direct access to the entire PowerShell ecosystem.

=== Key Features ===
- PowerShell 7 as MCP Server: Your PowerShell console becomes an MCP server
- Server Functionality: Provides MCP functionality via named pipe
- Stdio Proxy Included: stdio-based proxy server for MCP client compatibility
- Unlimited PowerShell Access: Execute any PowerShell cmdlet via MCP clients
- Simple Setup: Plug-and-play integration with MCP clients via proxy server
- Instant Deployment: Import the module and start using immediately!

=== Setup Instructions ===

Here''s the complete configuration guide with the corrected numbering:

1. Install Module (first time only)
   PS> Install-Module PowerShell.MCP

2. Import Module
   PS> Import-Module PowerShell.MCP,PSReadLine
   (Upon import, PowerShell starts operating as an MCP server)

3. Verify PowerShell.MCP Installation Directory
   First, confirm the PowerShell.MCP module installation directory:
   PS> (Get-Module PowerShell.MCP).ModuleBase

   This command will display the PowerShell.MCP installation directory path.
   Example: `C:\Users\[Username]\Documents\PowerShell\Modules\PowerShell.MCP\1.1.0`

4. Claude Desktop Configuration Example
   For Claude Desktop, open your configuration file with Notepad.
   (Windows: `%APPDATA%\Claude\claude_desktop_config.json`)

   Add the following to your configuration file:

{
  "mcpServers": {
    "PowerShell": {
      "command": "[PowerShell.MCP Installation Directory]\\bin\\PowerShell.MCP.Proxy.exe",
      "args": []
    }
  }
}

   Important Notes:
   - Replace `[PowerShell.MCP Installation Directory]` with the actual path confirmed in step 3
   - In JSON files, backslashes must be escaped as `\\`
   - Restart the Claude Desktop application after adding the configuration to apply changes

5. Other MCP Clients
   Other MCP clients can also be used by configuring stdio connections to PowerShell.MCP.Proxy.exe.

=== Architecture Overview ===
This module operates with the following architecture:
1. PowerShell Module: Functions as named-pipe-based MCP server
2. Stdio Proxy Server: Bridges between MCP clients and named pipe MCP server
3. MCP Client: Connects to proxy server via stdio for operations

=== Prompt Examples ===

Basic System Information:
- "Tell me the current date and time"
- "Check the PowerShell version"
- "Display system environment variables"
- "Show me disk usage"

System Monitoring and Analysis:
- "Show me all processes consuming more than 100MB of memory, sorted by CPU usage"
- "Display 5 running Windows services"
- "Show me the list of directories in the current folder"
- "Display top 5 processes by memory usage"

Practical Calculations and Data Processing:
- "Calculate the date 30 days from today"
- "Generate a 12-character random password"
- "Calculate the total file size for a specific extension"

File and Folder Operations:
- "Compare the contents of two folders and show the differences"
- "Display the top 10 recently updated files"

Network and Connectivity:
- "Check if a specific port is open"
- "Query DNS records and display results"

Advanced Integration and Report Generation:
- "Generate system information as an HTML report and open it in browser"
- "Create an HTML report of system errors from the last 3 days and open it in browser"
- "Visualize process usage as an HTML dashboard and display in browser"
- "Create a colorful HTML chart of disk usage analysis and display automatically"
- "Visualize network connection history as HTML timeline"

System Administration Tasks:
- "Export a list of installed programs to CSV and open in Excel"
- "Search for specific application settings in the registry"

Data Analysis and Reporting:
- "Extract warnings and errors from Windows event logs"
- "Create a system performance overview report"
- "Explain the steps for creating the current report"
- "Display folder structure hierarchically"

Automation and Efficiency:
- "Auto-generate reports in specified formats"

Creative Tasks:
- "Visualize error trends in log files with graphs in HTML"
- "Generate QR codes (encode strings)"
- "Display long-running processes with colorful progress bars"
- "Visualize folder size analysis in TreeMap-style HTML"

Developer Features:
- "Run syntax checks on PowerShell scripts"
- "Generate documentation from comment-based help"
- "Analyze module dependencies"
- "Calculate code metrics and evaluate quality"
- "Please review the .cs files under c:\folder"

PowerShell-Specific Advanced Features:
- "Check the cmdlets included in imported modules"
- "Check Get-Date cmdlet parameters with Get-Help cmdlet and try several examples with those parameters"
- "Send several complex commands that you know to the PowerShell console with explanations. Do not execute them."
- "Create processing examples combining multiple cmdlets using pipelines"
- "Use PowerShell''s help system to display detailed information about specific commands"
- "How do you find using PowerShell.MCP? Please share your thoughts and experiences"

=== Software Requirements ===
- Windows 10 (version 1607 or higher) or Windows 11
- Windows Server 2016 or higher
- PowerShell 7.2.15 or higher
- PSReadLine (version 2.3.4 or higher)

=== Package Contents ===
- PowerShell.MCP Module: Named-pipe-based MCP server functionality
- PowerShell.MCP.Proxy.exe: Stdio proxy server for MCP client compatibility

=== Known Limitations ===
- Security Note: Provides complete PowerShell access - use only in trusted environments

=== What Makes This Special? ===
This isn''t just another tool - it''s a game changer! By connecting MCP clients to the entire Windows ecosystem through PowerShell, you''re essentially giving them superpowers. From system administration to creative automation, the possibilities are limitless.

Note: This module has been tested and verified with Claude Desktop. It should work with other MCP clients as well, but this is untested.

Are you ready to revolutionize your AI assistant experience? Import the module and start commanding your system like never before!
'

        # Prerelease string of this module
        # Prerelease = ''

        # Flag to indicate whether the module requires explicit user acceptance for install/update/save
        # RequireLicenseAcceptance = $false

        # External dependent modules of this module
        # ExternalModuleDependencies = @()

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}
